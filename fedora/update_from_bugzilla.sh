
reverse() {
  tac <(echo "$@" | tr ' ' '\n') | tr '\n' ' '
}

echo "Usage: $0 bug_id_number_of_bugzilla [stage]"
echo "stage 0: rpmdev-bumpspec"
echo "stage 1: scratch-build"
echo "stage 2: rfpkg new-sources && fedpkg ci -c && git show"
echo "stage 3: fedpkg push && fedpkg build on rawhide"
echo "stage 4: build all branches"
echo "stage 5: bodhi updates all branches"

echo $(basename $(pwd))
package=$(basename $(pwd))
echo "in dir package i.e. $package"

bug_id=$1
if [ -z "$1" ]
then
    echo "no bug_id_neumber set"
    exit
fi

if [ -z "$2" ]
then
    stage=0
else
    stage=$2
fi

if [ ! -f $package.spec ]; then
    echo "File $package.spec not found!"
    exit 1
fi
if (( $bug_id < 10000 )); then
    echo "bad bug number"
    exit 1
fi
if test $stage -le 0
then
echo STAGE 0
git checkout rawhide
git pull

attach_id=$(wget https://bugzilla.redhat.com/show_bug.cgi?id=$bug_id -q -O - | grep "attachment " | tail -n1 | sed -e 's/.*attachment //; s/<.*//')
wget https://bugzilla.redhat.com/attachment.cgi?id=$attach_id -q -O - | patch -p1
returncode=$?
if test $returncode -ne 0; then
    echo patch failed returncode:$returncode
    exit $returncode
fi
fi

if test $stage -le 1
then
echo STAGE 1
spectool -g $package.spec
fedpkg new-sources $(spectool -l $package.spec | grep / | sed 's/.*\///') --offline
echo Press enter scratch-build or n to skip; read dummy;
    if [[ "$dummy" != "n" ]]; then
        fedpkg scratch-build --srpm --fail-fast
    fi
fi

if test $stage -le 2
then
echo STAGE 2
echo Press enter to upload sources and commit or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
    fedpkg new-sources $(spectool -l $package.spec | grep / | sed 's/.*\///')
    fedpkg ci -c && git show
fi
fi

if test $stage -le 3
then
echo STAGE 3
echo Press enter to push and build on current branch; read dummy;
if [[ "$dummy" != "n" ]]; then
fedpkg push && fedpkg build --nowait --fail-fast
fi
fi

# only here we need repos
echo f to fedora branches or e to epel branches or a to all branches; read dummy;
if [[ "$dummy" == "f" ]]; then
REPOS="$(reverse $(fedpkg releases-info -f))"
else
if [[ "$dummy" == "e" ]]; then
REPOS="$(reverse $(fedpkg releases-info -e))"
else
REPOS="$(reverse $(fedpkg releases-info -f))$(reverse $(fedpkg releases-info -e)) "
fi
fi

if test $stage -le 4
then
echo STAGE 4
for repo in $REPOS ; do
echo Press enter to build on branch $repo or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
git checkout $repo && git merge rawhide && git push && fedpkg build --nowait --fail-fast; git checkout rawhide
fi
done
fi

if test $stage -le 5
then
echo STAGE 5 you may have the bodhi message on clog.txt file , instead be autogenerated
bugs_bodhi="--bugs $bug_id"
if [[ -f clog.txt ]]; then
notes="--notes \"$(cat clog.txt)\""
else
notes=""
fi
bugtype=bugfix
echo Press s if it is security update or enter bugfix update; read dummy;
if [[ "$dummy" == "s" ]]; then
bugtype=security
fi
for repo in $REPOS ; do
packagever=$(fedpkg --release $repo verrel)
echo "fedpkg update --type $bugtype $bugs_bodhi $notes"
echo Press enter to run bodhi on $packagever or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
git checkout $repo
fedpkg update --type $bugtype $bugs_bodhi $notes
git checkout rawhide
fi
done
fi

#echo "Done! Run this to create your update:"
#echo "bodhi updates new --autokarma --autotime --type enhancement --severity low --stable-karma 1 --from-tag ${SIDETAG} --notes \"Updating FB packages to ...\""
#echo fedpkg clog
#echo "bodhi updates new --autokarma --autotime --type bugfix --severity medium --notes-file clog --bugs 1918032 --close-bugs --request testing virtualbox-guest-additions-6.1.18-1.fc32 --user sergiomb"
#echo rm clog
