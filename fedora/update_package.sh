
reverse() {
  tac <(echo "$@" | tr ' ' '\n') | tr '\n' ' '
}

echo "Usage: $0 version stage bug_number_of_bugzilla"
echo "stage 0: rpmdev-bumpspec"
echo "stage 1: scratch-build"
echo "stage 2: rfpkg new-sources && fedpkg ci -c && git show"
echo "stage 3: fedpkg push && fedpkg build on rawhide"
echo "stage 4: build all branches"
echo "stage 5: bodhi updates all branches"

echo $(basename $(pwd))
package=$(basename $(pwd))
echo "in dir package i.e. $package"

version=$1
if [ -z "$1" ]
then
    echo "no version set"
    exit;
fi

if [ -z "$2" ]
then
      stage=0
else
      stage=$2
fi

if (($stage > 10)); then
echo "stage > 10 exiting"
exit 0
fi

if [ -z "$3" ]
then
    bugid=0
    bugs_bodhi=""
    bugs_str="Update $package to ${version}"
else
    bugid=$3
    if (( $bugid < 500 )); then
        echo "bad bug_id number"
        exit 2
    fi
    bugs_bodhi="--bugs $3"
    bugs_str="Update $package to ${version} (#$bugid)"
fi

if [ ! -f $package.spec ]; then
    echo "File $package.spec not found!"
    exit 1
fi

if test $stage -le 0
then
echo STAGE 0
git checkout rawhide
git pull
rpmdev-bumpspec -n $version -c "${bugs_str}" $package.spec
fi

if test $stage -le 1
then
echo STAGE 1
spectool -g $package.spec
echo "fedpkg copr-build sergiomb/vboxfor23 or sergiomb/builds_for_Stable_Releases"
echo Press enter scratch-build or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
fedpkg scratch-build --srpm --fail-fast
fi
fi

if test $stage -le 2
then
echo STAGE 2
echo Press enter to upload sources and commit or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
    #fedpkg new-sources $(spectool -l --sources $package.spec --define "_sourcedir ." | grep / | sed 's/.*\///')
    fedpkg new-sources $(spectool -l --sources $package.spec --define "_sourcedir ." | sed 's/.*: //;s/.*\///')
    fedpkg ci -c || git commit -m "${bugs_str}"
    git show
fi
fi

if test $stage -le 3
then
echo STAGE 3
echo "Press enter to push and build on current branch, $(git branch -l | grep '*' | cut -b3- ), or n to skip"; read dummy;
if [[ "$dummy" != "n" ]]; then
fedpkg push && fedpkg build --nowait --fail-fast
fi
fi

# only here we need repos
echo f to fedora branches or e to epel branches or a to all branches; read dummy;
if [[ "$dummy" == "f" ]]; then
REPOS="$(reverse $(fedpkg releases-info -f))"
else
if [[ "$dummy" == "e" ]]; then
REPOS="$(reverse $(fedpkg releases-info -e))"
else
REPOS="$(reverse $(fedpkg releases-info -f))$(reverse $(fedpkg releases-info -e)) "
fi
fi

if test $stage -le 4
then
echo STAGE 4
for repo in $REPOS ; do
echo Press enter to build on branch $repo or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
git checkout $repo && git merge rawhide && git push && fedpkg build --nowait --fail-fast; git checkout rawhide
fi
done
fi

if test $stage -le 5
then
echo STAGE 5 you may have the bodhi message on clog.txt file , instead be autogenerated
if [[ -f clog.txt ]]; then
notes="--notes \"$(cat clog.txt)\""
else
notes=""
fi
bugtype=bugfix
echo Press s if it is security update or enter bugfix update; read dummy;
if [[ "$dummy" == "s" ]]; then
bugtype=security
fi
for repo in $REPOS ; do
packagever=$(fedpkg --release $repo verrel)
#if [[ $repo == f* ]]; then
#repo=fc${repo:1}
#fi
#if [[ $repo == e* ]]; then
#repo=${repo:2}
#fi
#echo "/usr/bin/bodhi updates new --autokarma --autotime --type $bugtype --severity medium --notes-file clog $bugs_bodhi --close-bugs --request testing $packagever"
echo "fedpkg update --type $bugtype $bugs_bodhi $notes"
echo Press enter to run bodhi on $packagever or n to skip; read dummy;
if [[ "$dummy" != "n" ]]; then
#echo "/usr/bin/bodhi updates new --autokarma --autotime --type $bugtype --severity medium --notes-file clog $bugs_bodhi --close-bugs --request testing $packagever" | sh
git checkout $repo
fedpkg update --type $bugtype $bugs_bodhi $notes
git checkout rawhide
fi
done
rm clog
fi
